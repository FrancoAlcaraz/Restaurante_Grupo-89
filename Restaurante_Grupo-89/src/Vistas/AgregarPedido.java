/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import AccesoADatos.MesaData;
import AccesoADatos.MeseroData;
import AccesoADatos.PedidosData;
import AccesoADatos.ProductoData;
import Entidades.Mesa;
import Entidades.Mesero;
import Entidades.Pedidos;
import Entidades.Producto;
import java.awt.Graphics;
import java.awt.Image;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Bel
 */
public class AgregarPedido extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo = new DefaultTableModel() {
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };
    double pre = 0.0;
    PanelImagen fondo = new PanelImagen();

    /**
     * Creates new form AgregarPedido
     */
    public AgregarPedido() {
        this.setContentPane(fondo);
        initComponents();
        armarCabecera();
        CargarComboMesa();
        CargarComboProducto();
        CargarComboHora();
        CargarComboCantidad();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new PanelImagen();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabla = new javax.swing.JTable();
        jbSalir = new javax.swing.JButton();
        jbRealizarPedido = new javax.swing.JButton();
        jbAgregarProducto = new javax.swing.JButton();
        jcMesa = new javax.swing.JComboBox<>();
        jcProducto = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jbEliminarProducto = new javax.swing.JButton();
        jtPrecioTotal = new javax.swing.JTextField();
        jcHora = new javax.swing.JComboBox<>();
        jcCantidad = new javax.swing.JComboBox<>();
        jdFecha = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Haz Tu Pedido");

        jLabel2.setText("Mesa:");

        jLabel3.setText("Hora:");

        jLabel4.setText("Producto:");

        jLabel5.setText("Cantidad:");

        jTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Producto", "Cantidad", "Precio Unidad", "Precio Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTabla);

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        jbRealizarPedido.setText("Realizar Pedido");
        jbRealizarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRealizarPedidoActionPerformed(evt);
            }
        });

        jbAgregarProducto.setText("Agregar Producto");
        jbAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarProductoActionPerformed(evt);
            }
        });

        jcProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcProductoActionPerformed(evt);
            }
        });

        jLabel6.setText("Precio total:");

        jbEliminarProducto.setText("Eliminar Producto");
        jbEliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarProductoActionPerformed(evt);
            }
        });

        jtPrecioTotal.setEditable(false);
        jtPrecioTotal.setText("0.0");

        jLabel7.setText("Fecha:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jcMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcHora, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jcProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jcCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jdFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtPrecioTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbRealizarPedido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSalir))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbAgregarProducto)
                        .addGap(18, 18, 18)
                        .addComponent(jbEliminarProducto)
                        .addGap(106, 106, 106)))
                .addGap(50, 50, 50))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jcMesa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jcHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jcProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jdFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jcCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAgregarProducto)
                    .addComponent(jbEliminarProducto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSalir)
                    .addComponent(jbRealizarPedido)
                    .addComponent(jLabel6)
                    .addComponent(jtPrecioTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarProductoActionPerformed
        try {
            Mesa mesa = (Mesa) jcMesa.getSelectedItem();
            Producto producto = (Producto) jcProducto.getSelectedItem();
            String horaStr = (String) jcHora.getSelectedItem();
            LocalTime hora = LocalTime.parse(horaStr);
            LocalDate fecha = jdFecha.getDate().
                    toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            int cantidad = Integer.parseInt(jcCantidad.getSelectedItem().toString());
            if (cantidad < 1) {
                JOptionPane.showMessageDialog(null, "Seleccione la cantidad de productos que desea agregar");
                return;
            }
            if (mesa == null || producto == null || hora == null || fecha == null) {
                JOptionPane.showMessageDialog(null, "Seleccione todos los campos");
                return;
            }
            LocalDate hoy = LocalDate.now();
            LocalTime ahora = LocalTime.now();
            if (fecha.equals(hoy) && hora.isBefore(ahora)) {
                JOptionPane.showMessageDialog(null, "Ingrese un horario posterior al actual ");
                return;
            } else if (fecha.isBefore(hoy)) {
                JOptionPane.showMessageDialog(null, "Ingrese la fecha actual o una posterior a la actual");
                return;
            }
            String nombreProducto = producto.getNombre();
            double precio = producto.getPrecio();
            double precioTotal = precio * cantidad;
            jcMesa.setEnabled(false);
            jcHora.setEnabled(false);
            jdFecha.setEnabled(false);
            modelo.addRow(new Object[]{nombreProducto, cantidad, precio, precioTotal});
            jTabla.setModel(modelo);

            int cantidadDisponible = producto.getCantidad();
            int cantidadSeleccionada = cantidad;

            jcCantidad.removeAllItems();
            for (int i = 0; i <= cantidadDisponible - cantidadSeleccionada; i++) {
                jcCantidad.addItem(i);
            }

            pre += precioTotal;
            jtPrecioTotal.setText(String.valueOf(pre));

        } catch (NumberFormatException nf) {
            JOptionPane.showMessageDialog(this, "Ingrese correctamente los datos");
        }
    }//GEN-LAST:event_jbAgregarProductoActionPerformed

    private void jbEliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarProductoActionPerformed
        int filaS = jTabla.getSelectedRow();
        double pre = 0;
        if (filaS == -1) {
            JOptionPane.showMessageDialog(null, "Selecciona una fila primero.");
            return;
        } else {

            try {
                pre = Double.parseDouble(jtPrecioTotal.getText());
                double precioTotal = Double.parseDouble(modelo.getValueAt(filaS, 3).toString());
                pre -= precioTotal;
                jtPrecioTotal.setText(String.valueOf(pre));
                modelo.removeRow(filaS);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El campo de precio total no contiene un número válido.");
            }
        }
        if ((modelo.getRowCount() == 0)) {
            jcMesa.setEnabled(true);
            jcHora.setEnabled(true);
            jdFecha.setEnabled(true);
        }
    }//GEN-LAST:event_jbEliminarProductoActionPerformed

    private void jbRealizarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRealizarPedidoActionPerformed
//        if (modelo.getRowCount() == 0) {
//            JOptionPane.showMessageDialog(null, "Ingrese productos para su pedido");
//            return;
//        }
//
//        Mesa mesa = (Mesa) jcMesa.getSelectedItem();
//        MesaData md = new MesaData();
//        PedidosData pd = new PedidosData();
//        ProductoData prd = new ProductoData();
//        MeseroData med = new MeseroData();
//        String horaStr = (String) jcHora.getSelectedItem();
//        LocalTime hora = LocalTime.parse(horaStr);
//        LocalDate fecha = jdFecha.getDate()
//                .toInstant()
//                .atZone(ZoneId.systemDefault())
//                .toLocalDate();
//
//        int cont = modelo.getRowCount();
//        List<String> productos = new ArrayList<>();
//        List<Integer> cantidades = new ArrayList();
//
//        for (int i = 0; i < cont; i++) {
//            String nombreProducto = (String) modelo.getValueAt(i, 0);
//            int cantidadProducto = (Integer) modelo.getValueAt(i, 1);
//            productos.add(nombreProducto);
//            cantidades.add(cantidadProducto);
//        }
//
//        Mesa mesaSeleccionada = md.ObtenerMesaxID(mesa.getIdMesa());
//
//        if (mesaSeleccionada == null || !mesaSeleccionada.isEstado()) {
//            JOptionPane.showMessageDialog(null, "La mesa no está disponible.");
//            return;
//        }
//
//        List<Pedidos> listaPedidos = pd.ListarPedidos();
//        int nroPedido = listaPedidos.isEmpty() ? 1 : listaPedidos.get(listaPedidos.size() - 1).getNroPedido() + 1;
//
//        for (int i = 0; i < productos.size(); i++) {
//            String nomP = productos.get(i);
//            int cantidadProducto = cantidades.get(i);
//
//            List<Producto> productosEncontrados = prd.obtenerProductosxNombre(nomP);
//            if (!productosEncontrados.isEmpty()) {
//                Producto producto = productosEncontrados.get(0);
//
//                if (producto.getCantidad() >= cantidadProducto) {
//                    Pedidos pedido = new Pedidos(producto, med.ObtenerMesero(new Random().nextInt(med.obtenerMeseros().size()-1)),
//                            mesaSeleccionada, true, nroPedido, cantidadProducto, fecha, hora);
//                    pd.AgregarPedido(pedido);
//                    producto.setCantidad(producto.getCantidad() - cantidadProducto);
//                    prd.modificarProducto(producto);
//                } else {
//                    JOptionPane.showMessageDialog(null, "No hay suficiente cantidad del producto: " + nomP + " en el inventario.");
//                }
//            } else {
//                JOptionPane.showMessageDialog(null, "No se encontró el producto: " + nomP);
//            }
//        }
//
//        JOptionPane.showMessageDialog(null, "Su pedido fue agregado");
//        modelo.setRowCount(0);
//        jTabla.setModel(modelo);
//        if ((modelo.getRowCount() == 0)) {
//            jtPrecioTotal.setText("0.0");
//            jcMesa.setEnabled(true);
//            jcHora.setEnabled(true);
//            jdFecha.setEnabled(true);
//        }
//        if (modelo.getRowCount() == 0) {
//            JOptionPane.showMessageDialog(null, "Ingrese productos para su pedido");
//            return;
//        }
//
//        Mesa mesa = (Mesa) jcMesa.getSelectedItem();
//        MesaData md = new MesaData();
//        PedidosData pd = new PedidosData();
//        ProductoData prd = new ProductoData();
//        MeseroData med = new MeseroData();
//        String horaStr = (String) jcHora.getSelectedItem();
//        LocalTime hora = LocalTime.parse(horaStr);
//        LocalDate fecha = jdFecha.getDate().toInstant()
//                .atZone(ZoneId.systemDefault()).toLocalDate();
//        int pedidoReali = 0;
//        int cont = modelo.getRowCount();
//        List<String> productos = new ArrayList<>();
//        List<Integer> cantidades = new ArrayList();
//
//        for (int i = 0; i < cont; i++) {
//            String nombreProducto = (String) modelo.getValueAt(i, 0);
//            int cantidadProducto = (Integer) modelo.getValueAt(i, 1);
//            productos.add(nombreProducto);
//            cantidades.add(cantidadProducto);
//        }
//
//        Mesa mesaSeleccionada = md.ObtenerMesaxID(mesa.getIdMesa());
//
//        if (mesaSeleccionada == null || !mesaSeleccionada.isEstado()) {
//            JOptionPane.showMessageDialog(null, "La mesa no está disponible.");
//            return;
//        }
//
//        int nroPedido;
//        List<Pedidos> listaPedidos = pd.ListarPedidos();
//        if (listaPedidos.isEmpty()) {
//            nroPedido = 1;
//        } else {
//            int ultimoNroPedido = listaPedidos.get(listaPedidos.size() - 1).getNroPedido();
//            nroPedido = ultimoNroPedido + 1;
//
//            // Verificar si la mesa está ocupada en la fecha y hora especificadas.
//            for (Pedidos pedido : listaPedidos) {
//                if (pedido.getMesa().equals(mesaSeleccionada) && pedido.getFecha().equals(fecha) && pedido.getHora().equals(hora)) {
//                    JOptionPane.showMessageDialog(null, "La mesa seleccionada está ocupada en la fecha y hora especificadas, seleccione otra.");
//                    return;
//                }
//            }
//
//            for (int i = 0; i < productos.size(); i++) {
//                String nomP = productos.get(i);
//                int cantidadProducto = cantidades.get(i);
//
//                List<Producto> productosEncontrados = prd.obtenerProductosxNombre(nomP);
//                if (!productosEncontrados.isEmpty()) {
//                    Producto producto = productosEncontrados.get(0);
//
//                    if (producto.getCantidad() >= cantidadProducto) {
//                        List<Mesero> meserosDisponibles = med.obtenerMeseros();
//                        if (!meserosDisponibles.isEmpty()) {
//                            int indiceAleatorio = new Random().nextInt(meserosDisponibles.size());
//                            Mesero meseroAsignado = meserosDisponibles.get(indiceAleatorio);
//                            Pedidos pedido = new Pedidos(producto, meseroAsignado,
//                                    mesaSeleccionada, true, nroPedido, cantidadProducto, fecha, hora);
//                            pd.AgregarPedido(pedido); // Agregar el pedido a la base de datos
//                            pedidoReali++;
//                            // Descontar la cantidad del producto en el inventario después de agregar el pedido a la base de datos
//                            producto.setCantidad(producto.getCantidad() - cantidadProducto);
//                            prd.modificarProducto(producto);
//                        } else {
//                            JOptionPane.showMessageDialog(null, "No hay meseros disponibles para asignar al pedido.");
//                        }
//                    } else {
//                        JOptionPane.showMessageDialog(null, "No hay suficiente cantidad del producto: " + nomP + " en el inventario.");
//                    }
//                } else {
//                    JOptionPane.showMessageDialog(null, "No se encontró el producto: " + nomP);
//                }
//            }
//        }
//        if (pedidoReali > 0) {
//            JOptionPane.showMessageDialog(null, "Su pedido fue agregado");
//            modelo.setRowCount(0);
//            jTabla.setModel(modelo);
//
//            if ((modelo.getRowCount() == 0)) {
//                jtPrecioTotal.setText("0.0");
//                jcMesa.setEnabled(true);
//                jcHora.setEnabled(true);
//                jdFecha.setEnabled(true);
//            }
//        } else {
//            JOptionPane.showMessageDialog(null, "No se pudo agregar el pedido");
//        }

   if (modelo.getRowCount() == 0) {
        JOptionPane.showMessageDialog(null, "Ingrese productos para su pedido");
        return;
    }

    Mesa mesa = (Mesa) jcMesa.getSelectedItem();
    MesaData md = new MesaData();
    PedidosData pd = new PedidosData();
    ProductoData prd = new ProductoData();
    MeseroData med = new MeseroData();
    String horaStr = (String) jcHora.getSelectedItem();
    LocalTime hora = LocalTime.parse(horaStr);
    LocalDate fecha = jdFecha.getDate().toInstant()
            .atZone(ZoneId.systemDefault()).toLocalDate();
    int pedidoReali = 0;
    int cont = modelo.getRowCount();
    List<String> productos = new ArrayList<>();
    List<Integer> cantidades = new ArrayList();

    for (int i = 0; i < cont; i++) {
        String nombreProducto = (String) modelo.getValueAt(i, 0);
        int cantidadProducto = (Integer) modelo.getValueAt(i, 1);
        productos.add(nombreProducto);
        cantidades.add(cantidadProducto);
    }

    Mesa mesaSeleccionada = md.ObtenerMesaxID(mesa.getIdMesa());

    if (mesaSeleccionada == null || !mesaSeleccionada.isEstado()) {
        JOptionPane.showMessageDialog(null, "La mesa no está disponible.");
        return;
    }

    int nroPedido;
    List<Pedidos> listaPedidos = pd.ListarPedidos();
    if (listaPedidos.isEmpty()) {
        nroPedido = 1;
    } else {
        int ultimoNroPedido = listaPedidos.get(listaPedidos.size() - 1).getNroPedido();
        nroPedido = ultimoNroPedido + 1;

        // Verificar si la mesa está ocupada en la fecha y hora especificadas.
        for (Pedidos pedido : listaPedidos) {
            if (pedido.getMesa().getNumero()==(mesaSeleccionada.getNumero()) && pedido.getFecha().equals(fecha) && pedido.getHora().equals(hora)) {
                JOptionPane.showMessageDialog(null, "La mesa seleccionada está ocupada en la fecha y hora especificadas, seleccione otra.");
                return; // No agregar el pedido si la mesa está ocupada en la misma fecha y hora.
            }
        }

        for (int i = 0; i < productos.size(); i++) {
            String nomP = productos.get(i);
            int cantidadProducto = cantidades.get(i);

            List<Producto> productosEncontrados = prd.obtenerProductosxNombre(nomP);
            if (!productosEncontrados.isEmpty()) {
                Producto producto = productosEncontrados.get(0);

                if (producto.getCantidad() >= cantidadProducto) {
                    List<Mesero> meserosDisponibles = med.obtenerMeseros();
                    if (!meserosDisponibles.isEmpty()) {
                        int indiceAleatorio = new Random().nextInt(meserosDisponibles.size());
                        Mesero meseroAsignado = meserosDisponibles.get(indiceAleatorio);
                        Pedidos pedido = new Pedidos(producto, meseroAsignado,
                                mesaSeleccionada, true, nroPedido, cantidadProducto, fecha, hora);
                        pd.AgregarPedido(pedido); // Agregar el pedido a la base de datos
                        pedidoReali++;
                        // Descontar la cantidad del producto en el inventario después de agregar el pedido a la base de datos
                        producto.setCantidad(producto.getCantidad() - cantidadProducto);
                        prd.modificarProducto(producto);
                    } else {
                        JOptionPane.showMessageDialog(null, "No hay meseros disponibles para asignar al pedido.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No hay suficiente cantidad del producto: " + nomP + " en el inventario.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró el producto: " + nomP);
            }
        }
    }
    if (pedidoReali > 0) {
        JOptionPane.showMessageDialog(null, "Su pedido fue agregado");
        modelo.setRowCount(0);
        jTabla.setModel(modelo);

        if ((modelo.getRowCount() == 0)) {
            jtPrecioTotal.setText("0.0");
            jcMesa.setEnabled(true);
            jcHora.setEnabled(true);
            jdFecha.setEnabled(true);
        }
    } else {
        JOptionPane.showMessageDialog(null, "No se pudo agregar el pedido");
    }
    }//GEN-LAST:event_jbRealizarPedidoActionPerformed

    private void jcProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcProductoActionPerformed
        CargarComboCantidad();
    }//GEN-LAST:event_jcProductoActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jbSalirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTabla;
    private javax.swing.JButton jbAgregarProducto;
    private javax.swing.JButton jbEliminarProducto;
    private javax.swing.JButton jbRealizarPedido;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Integer> jcCantidad;
    private javax.swing.JComboBox<String> jcHora;
    private javax.swing.JComboBox<Mesa> jcMesa;
    private javax.swing.JComboBox<Producto> jcProducto;
    private com.toedter.calendar.JDateChooser jdFecha;
    private javax.swing.JTextField jtPrecioTotal;
    // End of variables declaration//GEN-END:variables

    private void armarCabecera() {
        modelo.addColumn("Producto");
        modelo.addColumn("Cantidad");
        modelo.addColumn("Precio Unidad");
        modelo.addColumn("Precio Total");
        jTabla.setModel(modelo);
    }

    public void CargarComboMesa() {
        jcMesa.removeAllItems();
        MesaData md = new MesaData();
        List<Mesa> mes = md.ObtenerMesas();
        for (Mesa mesas : mes) {
            jcMesa.addItem(mesas);
        }
    }

    public void CargarComboProducto() {
        jcProducto.removeAllItems();
        ProductoData pd = new ProductoData();
        List<Producto> pro = pd.obtenerProductos();
        for (Producto prou : pro) {
            jcProducto.addItem(prou);
        }
    }

    public void CargarComboHora() {
        jcHora.removeAllItems();
        List<String> horas = new ArrayList<>();
        int horaInicial = 10;
        int horaFinal = 22;

        for (int hora = horaInicial; hora <= horaFinal; hora++) {
            String horaFormateada = String.format("%02d:00", hora);
            horas.add(horaFormateada);
        }

        for (String hor : horas) {
            jcHora.addItem(hor);
        }
    }

    public void CargarComboCantidad() {
        jcCantidad.removeAllItems();
        Producto pro = (Producto) jcProducto.getSelectedItem();
        if (pro != null) {
            int cantidad = pro.getCantidad();
            for (int i = 0; i <= cantidad; i++) {
                jcCantidad.addItem(i);

            }
        }

    }

    class PanelImagen extends JPanel {

        Image imagen;

        @Override
        public void paint(Graphics g) {
            imagen = new ImageIcon(getClass().getResource("/Imagen/Generales.png")).getImage();
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
            setOpaque(false);
            super.paint(g);

        }
    }
}
